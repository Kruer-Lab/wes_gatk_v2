nextflowVersion = '>=22.10.4'
process.container = 'pskidmore/wes_gatk_v2:latest'

params {

    // Specify directory where references are (reference genome, dbSNP, interval list, ANNOVAR humandb, etc.)
    //resourcesDir = "$projectDir/resources/"
    resourcesDir = "/data/kruerlab/refs/wes_gatk_v2"

    inDataDir = "$projectDir/data/"
    outDataDir = "$projectDir/outData/"
    outTrioDir = "$projectDir/outTrioData/"

    // Sample sheet containing directory name of each sample (does not need be full path)
    samplesheet = "$projectDir/samplesheet.tsv"
    sample = null

    // Pedigrees
    pedigreeDir = "$projectDir/pedigrees/"

    // References
    referenceGenome = "$resourcesDir/Homo_sapiens_assembly38_noALT_noHLA_noDecoy/Homo_sapiens_assembly38_noALT_noHLA_noDecoy.fasta"
    dbSNP = "$resourcesDir/Bundle/resources_broad_hg38_v0_Homo_sapiens_assembly38.dbsnp138.vcf"
    intervalList = "$resourcesDir/Interval_List/Exome-IDT_V1V2_span50bp.bed"

    // Workflow steps to run
    run_variant_calling = false
    run_variant_filtering = false
    index_reference = false

    // Columns in vcf file
    motherIDX = 9
    fatherIDX = 10
    childIDX = 11

    // Filter cutoffs
    
    // Denovo variants
    MAP_QUAL_DEN = 40	// mapping quality 
    COV_PROB_DEN = 10	// proband coverage for denovo variants
    MAD_PROB_DEN = 5	//proband minor allele depth for denovo variant
    MA_FRAC1_PROB_DEN = 0.2	// proband minor allele fraction threhsod 1 for denovo variant
    MA_FRAC2_PROB_DEN = 0.28	// proband minor allele fraction threshold 2 for denovo variant
    MAD_LINE_DEN = 10	// alernate allele margin for denovo variant
    MAF_DEN = 0.0004	// minor allele frequency threshod for denovo variants
    COV_PAR_DEN = 10	// parent coverage for denovo variants
    MAD_PROB_DEN = 5 	//proband minor allele depth for denovo variants
    MAD_FRAC_PAR_DEN = 0.035  //parent minor allele depth fraction for denovo variants

    // Recessive variants
    MAP_QUAL_REC = 40 // mapping quality for recessive variants
    GT_QUAL_REC = 20.00	// genotype quality for recessive variants
    MAF_REC = 0.001 	// minor allele frequency for recessive variants
    COV_PROB_REC = 8	// proband coverage for recessive variants
    CADD_THR = 20.00	// minimum CADD score 

    // Dominant variants
    MAP_QUAL_DOM = 40 // mapping quality for dominant variants
    GT_QUAL_DOM = 20	// genotype quality
    COV_PROB_DOM = 8	// proband coverage for dominant variants
    MAF_DOM = 0.0005	// minor allele frequency for dominant variants
    MA_FRAC1_PROB_DOM = 0.2	// proband minor allele fraction threhsod 1 for dominant variant
    MA_FRAC2_PROB_DOM = 0.28	// proband minor allele fraction threshold 2 for dominant variant
    MAD_LINE_DOM = 10	// alernate allele margin for dominant variant

    // Xlink variants
    MAF_XLINK = 0.00005	// minor allele frequency for dominant variants
}

profiles {

    // For running locally with Docker container (small number of samples or testing)
    standard {
        process.executor = 'local'
        docker.enabled = true
        process.queueSize = 2
        process.cpus = 4
        process.memory = '8GB'
    }

    // For running on HPC without submitting slurm jobs (small number of samples or testing)
    clusterLocal {
        process.executor = 'local'
        docker.enabled = false
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "$projectDir/work/"
        process.queueSize = 5
        process.cpus = 8
        process.memory = '4GB'
    }

    // For running on HPC with submitting slurm jobs (large number of samples)
    cluster {
        process.executor = 'slurm'
        singularity.enabled = true
        singularity.autoMounts = true
        singularity.cacheDir = "$projectDir/work/"

        process {

            // Default resources
            cpus = 8
            memory = '8GB'
            time = '1hour'
            queueSize = 250

            withLabel: short {
                cpus = 4
                memory = '4GB'
                time = { 10.min * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 2
            }
            withLabel: medium {
                cpus = 8
                memory = '16GB'
                time = { 1.hour * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 2
            }
            withLabel: long {
                cpus = 8
                memory = '8GB'
                time = {2.hour * task.attempt}
                errorStrategy = 'retry'
                maxRetries = 2
            }
            withLabel: alignment {
                cpus = 20
                memory = '48GB'
                time = { 30.min * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 2
            }
            withLabel: picard {
                cpus = 12
                memory = '32GB'
                time = { 20.min * task.attempt }
                errorStrategy = 'retry'
                maxRetries = 2
            }
            withName: INDEX_REFERENCE {
                cpus = 8
                memory = '64GB'
                time = '8hour'
            }
        }
    }
}
